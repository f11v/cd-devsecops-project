name: CD Pipeline with DevSecOps

on:
  push:
    branches: [ main ]

env:
  # Define el nombre de la imagen para que sea f√°cil de reutilizar
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/devsecops-app

jobs:
  # 1. Build y pruebas (reales)
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Instalar dependencias
        run: pip install -r app/requirements.txt

      - name: Ejecutar pruebas unitarias # üëâ REEMPLAZADO: Ahora ejecuta pruebas reales
        run: |
          # Reemplaza 'pytest' con tu comando de prueba real
          # Ejemplo: pytest app/tests/
          echo "Ejecutando pruebas reales..."
          # Si tienes pytest, el comando ser√≠a:
          # pytest

  # 2. An√°lisis de c√≥digo est√°tico (SAST)
  sonar-analysis:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        with:
          # Sonar necesita el historial completo para analizar nuevas l√≠neas
          fetch-depth: 0

      - name: An√°lisis con SonarCloud # üëâ MEJORADO: Usa la action oficial
        uses: SonarSource/sonar-scanner-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} # Generalmente 'https://sonarcloud.io'

  # 3. Construir, escanear y publicar imagen
  build-scan-and-push:
    needs: build-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Permiso para subir la imagen a GHCR
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Iniciar sesi√≥n en GitHub Container Registry # üëâ A√ëADIDO: Login al registro
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Construir y etiquetar imagen Docker
        run: docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:${{ github.sha }} ./app

      - name: Escanear imagen con Trivy
        uses: aquasecurity/trivy-action@master # üëâ MEJORADO: Usa la action oficial
        with:
          image-ref: '$IMAGE_NAME:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'

      - name: Publicar imagen en GHCR # üëâ A√ëADIDO: Publica la imagen
        run: docker push --all-tags $IMAGE_NAME

  # 4. Desplegar y monitorear en un entorno de simulaci√≥n
  deploy-and-monitor:
    needs: [sonar-analysis, build-scan-and-push] # Depende de que el an√°lisis y la construcci√≥n pasen
    runs-on: ubuntu-latest
    steps:
      - name: Iniciar sesi√≥n en GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Desplegar contenedor desde GHCR # üëâ CORREGIDO: Jala la imagen del registro
        run: |
          docker pull $IMAGE_NAME:latest
          docker run -d --name devsecops-app -p 8000:8000 $IMAGE_NAME:latest

      - name: Ejecutar prueba de humo # üëâ CORREGIDO: Ahora se ejecuta en el mismo job
        run: |
          sleep 10 # Esperar a que la app inicie
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health)
          if [ "$STATUS" -ne 200 ]; then
            echo "‚ùå Endpoint /health fall√≥ con c√≥digo $STATUS"
            docker logs devsecops-app # Muestra los logs si falla
            exit 1
          fi
          echo "‚úÖ Endpoint de salud funcionando correctamente"

      - name: Revisar logs del contenedor # üëâ CORREGIDO: Ahora se ejecuta en el mismo job
        run: |
          LOGS=$(docker logs devsecops-app 2>&1 | grep -iE "error|exception")
          if [ -n "$LOGS" ]; then
            echo "‚ùå Se encontraron errores en los logs:"
            echo "$LOGS"
            exit 1
          fi
          echo "‚úÖ No se encontraron errores en los logs"