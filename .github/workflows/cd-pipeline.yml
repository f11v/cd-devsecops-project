name: CD Pipeline with DevSecOps

on:
  push:
    branches: [ main ]

jobs:
  # 1. Build y pruebas
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v3
      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Instalar dependencias
        run: |
          pip install -r app/requirements.txt
      - name: Pruebas de salud
        run: echo "Pruebas exitosas"

  sonar-analysis:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v3
      - name: Instalar SonarScanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          mv sonar-scanner-5.0.1.3006-linux sonar-scanner
          echo "$(pwd)/sonar-scanner/bin" >> $GITHUB_PATH

      - name: Ejecutar análisis Sonar
        run: sonar-scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 2. Construcción de imagen y análisis de seguridad (con política de despliegue)
  build-and-scan:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v3
      - name: List files in workspace
        run: ls -R
      - name: Construir imagen Docker
        run: docker build -t devsecops-app ./app
      - name: Instalar Trivy y escanear imagen
        run: |
          sudo apt-get update
          sudo apt-get install curl -y
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
          trivy image --exit-code 1 --severity HIGH,CRITICAL devsecops-app

  # 3. Simulación de despliegue a producción
  simulate-prod:
  needs: build-and-scan
  runs-on: ubuntu-latest
  steps:
    - name: Desplegar contenedor en producción
      run: |
        docker stop devsecops-app || true
        docker rm devsecops-app || true
        docker run -d --name devsecops-app -p 8000:8000 devsecops-app

  post-deployment-monitoring:
    needs: simulate-prod
    runs-on: ubuntu-latest
    steps:
      - name: Ejecutar prueba de humo
        run: |
          sleep 10
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health)
          if [ "$STATUS" -ne 200 ]; then
            echo "❌ Endpoint /health falló con código $STATUS"
            exit 1
          fi
          echo "✅ Endpoint de salud funcionando correctamente"

      - name: Revisar logs del contenedor
        run: |
          LOGS=$(docker logs devsecops-app | grep -iE "error|exception")
          if [ -n "$LOGS" ]; then
            echo "❌ Se encontraron errores:"
            echo "$LOGS"
            exit 1
          fi
          echo "✅ No se encontraron errores en los logs"

      